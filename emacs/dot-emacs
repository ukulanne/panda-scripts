;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Anne Summers                    ;;
;; ukulanne@gmail.com             ;;
;; June 26, 1999                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Time-stamp: <2022-01-20 13:48:46 panda>                

;; .emacs configuration file
;;   Copyright (C) <1999>  <Anne Summers>

;; This program is free software; you can redistribute it and/or modify
;;   it under the terms of the GNU General Public License as published by
;;   the Free Software Foundation; either version 3 of the License, or
;;   (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;;   but WITHOUT ANY WARRANTY; without even the implied warranty of
;;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;   GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;;    along with this program.  If not, see <http://www.gnu.org/licenses/>.

;; (global-auto-complete-mode t)
(eval-after-load 'auto-complete '(global-auto-complete-mode 1))

(set 'temporary-file-directory "/tmp")
(setq auto-save-interval 2500)
(setq auto-save-timeout nil)

;; Update a time-stamp within first 20 lines of the buffer.
;; Time-stamp: <>;  or Time-stamp: ""

(if (not (memq 'time-stamp write-file-hooks))
    (setq write-file-hooks
	  (cons 'time-stamp write-file-hooks)))

(setq time-stamp-active t)
 
(setq time-stamp-pattern "20/Time-stamp:[ \t]+\\\\?[\"<]+%:y-%02m-%02d %02H:%02M:%02S %u\\\\?[\">]")

;; The following line ensures that emacs deletes the #buffer# files
;; that it uses for auto-save files.

;;(setq delete-auto-save-files t)

;; If you don't like the fact that emacs leaves buffer~ files laying
;; around when it quits use this command.

(setq make-backup-files nil) 

(setq backup-directory-alist `(("." . "/tmp")))

;; This is to prevent node from crashing when typing a Vue file
(setq create-lockfiles nil)

(tool-bar-mode -1)
(scroll-bar-mode -1)

(setq ring-bell-function 'ignore)

(setq shell-file-name "bash")

(setq user-mail-address "arlrios@us.ibm.com")

(setq default-major-mode 'text-mode)

(setq display-time-24hr-format t)

(display-time)

;; Compile command line to use :

(setq compile-command (concat "node " (buffer-file-name)))

;; Copy/paste

(setq x-select-enable-primary t)
(setq x-select-enable-clipboard t)


(defun kill-buffer-fast () "Kills the current buffer"
  (interactive)
  (kill-buffer nil))


;; Global Keys

(global-set-key "\M-g" 'goto-line)
(global-set-key "\C-x\C-g" 'goto-line)
(global-set-key "\C-x\C-j" 'compile-command)

(global-set-key [f1] 'list-packages)           
(global-set-key [f2] 'find-file)           
(global-set-key [f3] 'kill-buffer-fast)    
(global-set-key [f4] 'goto-line)           

(global-set-key [f5] 'undo)               
(global-set-key [f6] 'replace-string)       
(global-set-key [f7] 'compile)
;;(global-set-key [f8] 'next-error)          

(global-set-key [f9] 'mark-defun)
(global-set-key [f10] 'mark-whole-buffer)
(global-set-key [f11] 'indent-region)
(global-set-key [f12] 'add-change-log-entry-other-window)

(global-set-key [home] 'beginning-of-line)
(global-set-key [end] 'end-of-line)
;;(global-set-key [C-next]  'scroll-other-window)
;;(global-set-key [C-prior] 'scroll-other-window-down)

(setq inhibit-startup-message t)

(fset 'yes-or-no-p 'y-or-n-p)

(setq auto-mode-alist (rassq-delete-all 'perl-mode auto-mode-alist))
(add-to-list 'auto-mode-alist '("\\.\\(p\\([lm]\\)\\)\\'" . cperl-mode))

(setq interpreter-mode-alist (rassq-delete-all 'perl-mode interpreter-mode-alist))
(add-to-list 'interpreter-mode-alist '("perl" . cperl-mode))
(add-to-list 'interpreter-mode-alist '("perl5" . cperl-mode))
(add-to-list 'interpreter-mode-alist '("miniperl" . cperl-mode))

;;(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
;;(setq js2-strict-missing-semi-warning nil)
(add-to-list 'interpreter-mode-alist '("nodemon " . js2-mode))

(add-to-list 'load-path "/home/panda/src/git/neotree")
(require 'neotree)
(global-set-key [f8] 'neotree-toggle)



;;(let ((default-directory  "~/.emacs.d/lisp/"))
;;  (normal-top-level-add-subdirs-to-load-path))

(add-to-list 'load-path "/usr/local/share/emacs/site-lisp/")
(add-to-list 'load-path "~/.emacs.d/elpa/ssass-mode-20190521.249/")
(add-to-list 'load-path "~/.emacs.d/elpa/nodejs-repl-0.2.2/")
(add-to-list 'load-path "~/.emacs.d/elpa/edit-indirect-20180422.1807/")


;;(require 'nodejs-repl)
(add-hook 'js-mode-hook
          (lambda ()
            (define-key js-mode-map (kbd "C-x C-e") 'nodejs-repl-send-last-expression)
            (define-key js-mode-map (kbd "C-c C-j") 'nodejs-repl-send-line)
            (define-key js-mode-map (kbd "C-c C-r") 'nodejs-repl-send-region)
            (define-key js-mode-map (kbd "C-c C-l") 'nodejs-repl-load-file)
            (define-key js-mode-map (kbd "C-c C-z") 'nodejs-repl-switch-to-repl)))

;;(require 'mmm-mode)
;;(require 'vue-html-mode)
;;(require 'vue-mode)

(require 'package)
(add-to-list 'package-archives '("melpa" . "http://stable.melpa.org/packages/") t)
(package-initialize)

(require 'color-theme)
(color-theme-initialize)
(color-theme-dark-laptop)

(setq-default indent-tabs-mode nil)

;; Indent 2 spaces for js modes
;;(setq tab-width 2)
(setq js-indent-level 2)
;;(defvaralias js2-indent-level 'tab-width)

(add-to-list 'load-path "/home/panda/opt/tern/emacs/")
(autoload 'tern-mode "tern.el" nil t)

(add-hook 'js-mode-hook   (lambda () (tern-mode t)))

(add-hook 'js-mode-hook   (lambda () (linum-mode 1)))
(add-hook 'sgml-mode-hook (lambda () (linum-mode 1)))

(global-linum-mode 1)
(linum-mode 1)


;;(use-package restclient
;;  :ensure t
;;  :mode (("\\.http\\'" . restclient-mode)))

(eval-after-load 'tern 
   '(progn
      (require 'tern-auto-complete)
      (tern-ac-setup)))

(require 'whitespace)
(autoload 'whitespace-mode "whitespace" "Toggle whitespace visualization." t)

;;(require 'feature-mode)
;;(add-to-list 'auto-mode-alist '("\.feature$" . feature-mode))


(setq markdown-command "pandoc")

(when (not (display-graphic-p))
  (message "Running emacs on the console [TRUE]")
  (xterm-mouse-mode 1))


(require 'server)

(unless (server-running-p)
  (server-start))

(defmacro with-unix (os &rest body)
  "Eval BODY if `system-type' is OS."
  (declare (indent defun))
  `(when (eq system-type ',os) ,@body))

(defun pkg-installed-msg (name pkg)
       (message "%s mode installed %s "
                name (if (package-installed-p pkg) "[TRUE]" "[FALSE]")))

(message "Checking for installed modules")
(pkg-installed-msg "Feature" 'feature-mode)
(pkg-installed-msg "Js2-mode" 'js2-mode)
(pkg-installed-msg "rjsx-mode" 'rjsx-mode)
(pkg-installed-msg "vue-mode" 'vue-mode)
(pkg-installed-msg "nodejs-repl" 'nodejs-repl)
(pkg-installed-msg "Tern-mode" 'tern-mode)
(pkg-installed-msg "Neotree-mode" 'neotree)


(with-unix gnu/linux (message "Operating system:  [GNU/Linux]"))

(with-unix aix (message "Operating system:  [AIX]"))

;;(byte-compile-file "~/.emacs.d/file-name-all-completions-aix/file-name-all-completions-aix.el" t)

;;(eval-after-load "file-name-all-completions-aix"
;;  (advice-add  #'file-name-all-completions :filter-return #'file-name-all-completions-aix))

(message "Dixitque Deus fiat lux et facta est Emacs.")
(message "Save the pandas!")


(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   '(markdown-mode nodejs-repl mmm-mode vue-mode rjsx-mode indium tern-auto-complete npm-mode js2-mode feature-mode)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

