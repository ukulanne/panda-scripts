;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Anne Summers                    ;;
;; ukulanne@gmail.com             ;;
;; June 26, 1999                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Time-stamp: <2018-05-02 11:46:20 panda>                

;; .emacs configuration file
;;   Copyright (C) <1999>  <Anne Summers>

;; This program is free software; you can redistribute it and/or modify
;;   it under the terms of the GNU General Public License as published by
;;   the Free Software Foundation; either version 3 of the License, or
;;   (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;;   but WITHOUT ANY WARRANTY; without even the implied warranty of
;;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;   GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;;    along with this program.  If not, see <http://www.gnu.org/licenses/>.

(package-initialize)

;;(global-auto-complete-mode t)
(eval-after-load 'auto-complete '(global-auto-complete-mode 1))

(set 'temporary-file-directory "/tmp")
(setq auto-save-interval 2500)
(setq auto-save-timeout nil)

;; Update a time-stamp within first 20 lines of the buffer.
;; Time-stamp: <>;  or Time-stamp: ""

(if (not (memq 'time-stamp write-file-hooks))
    (setq write-file-hooks
	  (cons 'time-stamp write-file-hooks)))
(setq time-stamp-active t)

;; We look for a time stamp in the first 20 line not 8
 
(setq time-stamp-pattern "20/Time-stamp:[ \t]+\\\\?[\"<]+%:y-%02m-%02d %02H:%02M:%02S %u\\\\?[\">]")

;; The following line ensures that emacs deletes the #buffer# files
;; that it uses for auto-save files.

(setq delete-auto-save-files t)

;; If you don't like the fact that emacs leaves buffer~ files laying
;; around when it quits use this command.

(setq make-backup-files nil) 

;; remove toolbar and scrollbar

(tool-bar-mode -1)
(scroll-bar-mode -1)

;; turn off the annoying alarm bell

(setq ring-bell-function 'ignore)

;; Name of shell to use
(setq shell-file-name "bash")

;; C coding style prefs
;;(c-set-style "k&r")
;;(setq c-basic-offset 8)

;;(setq-user-full-name "Anne Summers")

(setq user-mail-address "")

;; Open unidentified files in text mode

(setq default-major-mode 'text-mode)

;; Display clock 

(setq display-time-24hr-format t)
(display-time)

;; Compile command line to use :

(setq compile-command (concat "node " (buffer-file-name)))

;; Copy/paste

(setq x-select-enable-primary t)
(setq x-select-enable-clipboard t)


(defun kill-buffer-fast () "Kills the current buffer"
  (interactive)
  (kill-buffer nil))


;; Global Keys

(global-set-key "\M-g" 'goto-line)
(global-set-key "\C-x\C-g" 'goto-line)
(global-set-key "\C-x\C-j" 'compile-command)

(global-set-key [f2] 'find-file)           
(global-set-key [f3] 'kill-buffer-fast)    
(global-set-key [f4] 'goto-line)           

(global-set-key [f5] 'undo)               
(global-set-key [f6] 'replace-string)       
(global-set-key [f7] 'compile)
;;(global-set-key [f8] 'next-error)          

(global-set-key [f9] 'mark-defun)
(global-set-key [f10] 'mark-whole-buffer)
(global-set-key [f11] 'indent-region)
(global-set-key [f12] 'add-change-log-entry-other-window)

(global-set-key [home] 'beginning-of-line)
(global-set-key [end] 'end-of-line)
(global-set-key [C-next]  'scroll-other-window)
(global-set-key [C-prior] 'scroll-other-window-down)

; Do not show the GNU splash screen
(setq inhibit-startup-message t)

; Make all "yes or no" prompts show "y or n" instead
(fset 'yes-or-no-p 'y-or-n-p)

(setq auto-mode-alist (rassq-delete-all 'perl-mode auto-mode-alist))
(add-to-list 'auto-mode-alist '("\\.\\(p\\([lm]\\)\\)\\'" . cperl-mode))

(setq interpreter-mode-alist (rassq-delete-all 'perl-mode interpreter-mode-alist))
(add-to-list 'interpreter-mode-alist '("perl" . cperl-mode))
(add-to-list 'interpreter-mode-alist '("perl5" . cperl-mode))
(add-to-list 'interpreter-mode-alist '("miniperl" . cperl-mode))

(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
(setq js2-strict-missing-semi-warning nil)
(add-to-list 'interpreter-mode-alist '("nodemon " . js2-mode))


(add-to-list 'load-path "/home/panda/src/git/neotree")
(require 'neotree)
(global-set-key [f8] 'neotree-toggle)


(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
;;(package-initialize)

;;(require 'package) 
;(add-to-list 'package-archives
 ;;          '("melpa-stable" . "https://stable.melpa.org/packages/") t)
;; (add-to-list 'package-archives
;;              '("melpa" . "https://melpa.org/packages/") t)
;;(package-initialize)

(add-to-list 'package-archives '("marmalade" . "https://marmalade-repo.org/packages/"))
(setq dart-enable-analysis-server t)
(add-hook 'dart-mode-hook 'flycheck-mode)

(require 'color-theme)
(color-theme-initialize)
(color-theme-dark-laptop)

(setq-default indent-tabs-mode nil)

(setq global-linum-mode t) ;;Lines in all files
(linum-mode 1)

(add-to-list 'load-path "/home/panda/src/git/tern/emacs/")
(autoload 'tern-mode "tern.el" nil t)


(add-hook 'js-mode-hook   (lambda () (tern-mode t)))
(add-hook 'js-mode-hook   (lambda () (linum-mode 1)))
(add-hook 'sgml-mode-hook (lambda ()(linum-mode 1)))

(eval-after-load 'tern 
   '(progn
      (require 'tern-auto-complete)
      (tern-ac-setup)))

(require 'whitespace)
(autoload 'whitespace-mode "whitespace" "Toggle whitespace visualization." t)

(require 'feature-mode)
(add-to-list 'auto-mode-alist '("\.feature$" . feature-mode))

(when (not (display-graphic-p))
  (message "I am on emacs-nox.")
  (xterm-mouse-mode 1))

(require 'server)

(unless (server-running-p)
  (server-start))

(message "Dixitque Deus fiat lux et facta est Emacs.")
(message "Save the pandas!")


